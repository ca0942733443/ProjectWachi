import React, { useState, useEffect } from "react";
import { View, Text, TextInput, Button, FlatList, Alert } from "react-native";
import { useRoute, useNavigation } from "@react-navigation/native";
import { db, auth } from "../firebase";
import { doc, getDoc, updateDoc, collection, query, where, getDocs, setDoc, onSnapshot } from "firebase/firestore";

const CheckinScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { cid, checkinCode } = route.params || {};

  const [cno, setCno] = useState("");
  const [code, setCode] = useState(checkinCode || ""); 
  const [students, setStudents] = useState([]);
  const [questionShow, setQuestionShow] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [answer, setAnswer] = useState(""); // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏£‡∏≠‡∏Å

  useEffect(() => {
    const fetchOpenCheckin = async () => {
      const checkinQuery = query(collection(db, `classroom/${cid}/checkin`), where("status", "==", 1));
      const querySnapshot = await getDocs(checkinQuery);

      if (!querySnapshot.empty) {
        const openCheckin = querySnapshot.docs[0]; // ‡∏î‡∏∂‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        setCno(openCheckin.id);
      } else {
        Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà");
      }
    };

    if (cid) fetchOpenCheckin();
  }, [cid]);

  useEffect(() => {
    const fetchStudents = async () => {
      if (!cno) return;
      const querySnapshot = await getDocs(collection(db, `classroom/${cid}/checkin/${cno}/students`));
      setStudents(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
    };

    fetchStudents();
  }, [cid, cno]);

  useEffect(() => {
    const checkQuestionStatus = async () => {
      const questionRef = doc(db, `classroom/${cid}/checkin/${cno}`);
      const unsubscribe = onSnapshot(questionRef, (docSnap) => {
        if (docSnap.exists()) {
          const data = docSnap.data();
          setQuestionShow(data.question_show); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        }
      });

      return unsubscribe;
    };

    if (cid && cno) {
      checkQuestionStatus();
    }
  }, [cid, cno]);

  const handleCheckIn = async () => {
    if (!cno || !code) return Alert.alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");

    const checkinRef = doc(db, `classroom/${cid}/checkin/${cno}`);
    const checkinSnap = await getDoc(checkinRef);

    if (checkinSnap.exists() && checkinSnap.data().code === code) {
      const userUid = auth.currentUser.uid;
      const userName = auth.currentUser.displayName || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";

      // ‚úÖ 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
      await setDoc(doc(db, `classroom/${cid}/checkin/${cno}/students/${userUid}`), {
        stdid: userUid,
        name: userName,
        date: new Date().toISOString(),
      });

      // ‚úÖ 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
      await updateDoc(doc(db, `classroom/${cid}/checkin/${cno}/scores/${userUid}`), {
        date: new Date().toISOString(),
        status: 1, // 1 = ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        score: 10, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
      });

      Alert.alert("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } else {
      Alert.alert("‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
  };

  const handleAnswerSubmit = async () => {
    if (!answer) {
      Alert.alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö");
      return;
    }

    const userUid = auth.currentUser.uid;
    const questionRef = collection(db, `classroom/${cid}/checkin/${cno}/answers`);
    const newAnswerRef = doc(questionRef); // ‡∏™‡∏£‡πâ‡∏≤‡∏á document ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    await setDoc(newAnswerRef, {
      text: `‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ${cno}`, // ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firestore ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      students: {
        [userUid]: {
          text: answer,
          time: new Date().toISOString(),
        },
      },
    });

    Alert.alert("‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    setAnswer(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á
  };

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 18, fontWeight: "bold" }}>üìå ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á CNO ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
      <Text style={{ marginTop: 10 }}>‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ (CNO): {cno || "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..."}</Text>

      <TextInput
        placeholder="‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Code)"
        value={code}
        onChangeText={setCode}
        style={{ borderWidth: 1, padding: 10, marginVertical: 10 }}
      />

      <Button title="üîç ‡∏™‡πÅ‡∏Å‡∏ô QR Code" onPress={() => navigation.navigate("QRScanner")} />
      <Button title="‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠" onPress={handleCheckIn} />

      <Text style={{ marginTop: 20, fontWeight: "bold" }}>üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</Text>
      <FlatList
        data={students}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <Text>‚úÖ {item.stdid} - {item.name}</Text>
        )}
      />

      {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ question_show == true */}
      {questionShow && (
        <View style={{ marginTop: 20 }}>
          <Text style={{ fontWeight: "bold" }}>üìö ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</Text>
          <TextInput
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            value={answer}
            onChangeText={setAnswer}
            style={{ borderWidth: 1, padding: 10, marginVertical: 10 }}
          />
          <Button title="‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö" onPress={handleAnswerSubmit} />
        </View>
      )}
    </View>
  );
};

export default CheckinScreen;
