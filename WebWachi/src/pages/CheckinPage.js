import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../firebase";
import { doc, getDoc, updateDoc, collection, query, getDocs, setDoc, onSnapshot } from "firebase/firestore";
import { QRCodeCanvas } from "qrcode.react";
import { v4 as uuidv4 } from "uuid";
import "bootstrap/dist/css/bootstrap.min.css";

const CheckinPage = () => {
  const { classId } = useParams();
  const navigate = useNavigate();
  const [checkins, setCheckins] = useState([]);
  const [studentsCheckedIn, setStudentsCheckedIn] = useState([]);
  const [latestCheckinNo, setLatestCheckinNo] = useState(null);

  useEffect(() => {
    const q = query(collection(db, `classroom/${classId}/checkin`));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const checkinList = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setCheckins(checkinList);

      if (checkinList.length > 0) {
        setLatestCheckinNo(checkinList.length);
      }
    });

    return () => unsubscribe();
  }, [classId]);

  useEffect(() => {
    if (!latestCheckinNo) return;

    const studentCheckinRef = collection(db, `classroom/${classId}/checkin/${latestCheckinNo}/students`);
    const unsubscribe = onSnapshot(studentCheckinRef, (querySnapshot) => {
      const checkedInStudents = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setStudentsCheckedIn(checkedInStudents);
    });

    return () => unsubscribe();
  }, [classId, latestCheckinNo]);

  const handleStartCheckIn = async () => {
    try {
      const newCno = checkins.length + 1;

      const studentsRef = collection(db, `classroom/${classId}/students`);
      const studentsSnapshot = await getDocs(studentsRef);

      await setDoc(doc(db, `classroom/${classId}/checkin/${newCno}`), {
        code: uuidv4().substring(0, 6).toUpperCase(),
        date: new Date().toLocaleString(),
        status: 1,
      });

      studentsSnapshot.forEach(async (student) => {
        await setDoc(doc(db, `classroom/${classId}/checkin/${newCno}/students/${student.id}`), {
          stdid: student.data().stdid,
          name: student.data().name,
          remark: "",
          date: "", // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        });
      });

      alert(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${newCno} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`);
      setLatestCheckinNo(newCno);
    } catch (error) {
      console.error("Error starting new check-in:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  const handleCloseCheckIn = async () => {
    try {
      if (!latestCheckinNo) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà!");
        return;
      }

      await updateDoc(doc(db, `classroom/${classId}/checkin/${latestCheckinNo}`), { status: 2 });

      alert("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
    } catch (error) {
      console.error("Error closing check-in:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  return (
    <div className="container mt-5">
      <h1 className="mb-4 text-center">üìã ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h1>

      <div className="d-flex justify-content-center gap-3 mb-4">
        <button className="btn btn-success" onClick={handleStartCheckIn}>‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà</button>
        <button className="btn btn-danger" onClick={handleCloseCheckIn}>‚ùå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</button>
      </div>

      <div className="text-center mb-4">
        <h5>üîó QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h5>
        <QRCodeCanvas value={`${window.location.origin}/checkin/${classId}`} size={200} />
      </div>

      {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß */}
      <div className="card">
        <div className="card-body">
          <h5>üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</h5>
          {studentsCheckedIn.length > 0 ? (
            <table className="table">
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                  <th>‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤</th>
                  <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                </tr>
              </thead>
              <tbody>
                {studentsCheckedIn
                  .filter(student => student.date !== "") // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
                  .map((student, index) => (
                    <tr key={student.id}>
                      <td>{index + 1}</td>
                      <td>{student.stdid}</td>
                      <td>{student.name}</td>
                      <td>{student.date}</td>
                      <td>{student.remark || "-"}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          ) : (
            <p className="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</p>
          )}
        </div>
      </div>

      {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
      <div className="card mt-4">
        <div className="card-body">
          <h5>üìÖ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h5>
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th>‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              </tr>
            </thead>
            <tbody>
              {checkins.map((checkin, index) => (
                <tr key={checkin.id}>
                  <td>{index + 1}</td>
                  <td>{checkin.date}</td>
                  <td>{Object.keys(checkin.students || {}).length}</td>
                  <td>{checkin.status === 1 ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" : "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="text-center mt-4">
        <button className="btn btn-secondary" onClick={() => navigate(`/manage-class/${classId}`)}>üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</button>
      </div>
    </div>
  );
};

export default CheckinPage;
