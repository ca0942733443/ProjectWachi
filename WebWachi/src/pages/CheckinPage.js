import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  doc,
  getDoc,
  updateDoc,
  collection,
  query,
  getDocs,
  setDoc,
  onSnapshot,
} from "firebase/firestore";
import { QRCodeCanvas } from "qrcode.react";
import { v4 as uuidv4 } from "uuid";
import "bootstrap/dist/css/bootstrap.min.css";

const CheckinPage = () => {
  const { classId } = useParams();
  const navigate = useNavigate();
  const [checkins, setCheckins] = useState([]);
  const [studentsCheckedIn, setStudentsCheckedIn] = useState([]);
  const [latestCheckinNo, setLatestCheckinNo] = useState(null);
  const [studentsScores, setStudentsScores] = useState([]);
  const [showScores, setShowScores] = useState(false);
  const [checkinCode, setCheckinCode] = useState(null); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Check-in Code


    const handleGoToQuestionPage = () => {
    navigate(`/qa/${classId}`);
  };

  const fetchCheckinCode = async () => {
    if (!latestCheckinNo) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà!");
      return;
    }
    const checkinDoc = await getDoc(
      doc(db, `classroom/${classId}/checkin/${latestCheckinNo}`)
    );
    if (checkinDoc.exists()) {
      setCheckinCode(checkinDoc.data().code);
    } else {
      setCheckinCode(null);
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  useEffect(() => {
    if (!latestCheckinNo) return;

    const scoresRef = collection(
      db,
      `classroom/${classId}/checkin/${latestCheckinNo}/scores`
    );
    const unsubscribe = onSnapshot(scoresRef, (querySnapshot) => {
      const scores = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      setStudentsScores(scores);
    });

    return () => unsubscribe();
  }, [classId, latestCheckinNo]);


   // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
   const handleSaveScores = async () => {
    try {
      for (let student of studentsScores) {
        const studentRef = doc(
          db,
          `classroom/${classId}/checkin/${latestCheckinNo}/scores/${student.id}`
        );
        await updateDoc(studentRef, {
          score: student.score,
          remark: student.remark,
          status: student.status,
        });
      }
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
    } catch (error) {
      console.error("Error updating scores:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!");
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
  useEffect(() => {
    const q = query(collection(db, `classroom/${classId}/checkin`));
    const unsubscribe = onSnapshot(q, async (querySnapshot) => {
      const checkinList = await Promise.all(
        querySnapshot.docs.map(async (docSnap) => {
          const checkinInfo = docSnap.data();
          const studentQuery = collection(
            db,
            `classroom/${classId}/checkin/${docSnap.id}/students`
          );
          const studentSnapshot = await getDocs(studentQuery);
          return {
            id: docSnap.id,
            ...checkinInfo,
            studentCount: studentSnapshot.size,
          };
        })
      );

      setCheckins(checkinList);
      if (checkinList.length > 0) {
        setLatestCheckinNo(checkinList.length);
      }
    });

    return () => unsubscribe();
  }, [classId]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
  useEffect(() => {
    if (!latestCheckinNo) return;

    const studentCheckinRef = collection(
      db,
      `classroom/${classId}/checkin/${latestCheckinNo}/students`
    );
    const unsubscribe = onSnapshot(studentCheckinRef, (querySnapshot) => {
      const checkedInStudents = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setStudentsCheckedIn(checkedInStudents);
    });

    return () => unsubscribe();
  }, [classId, latestCheckinNo]);

  // ‚úÖ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà**
  const handleStartCheckIn = async () => {
    try {
      const newCno = checkins.length + 1;
      const studentsRef = collection(db, `classroom/${classId}/students`);
      const studentsSnapshot = await getDocs(studentsRef);

      // ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á /classroom/{cid}/checkin/{cno}
      await setDoc(doc(db, `classroom/${classId}/checkin/${newCno}`), {
        code: uuidv4().substring(0, 6).toUpperCase(),
        date: new Date().toLocaleString(),
        status: 1,
      });

      // ‚úÖ 2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á /classroom/{cid}/checkin/{cno}/scores
      studentsSnapshot.forEach(async (student) => {
        await setDoc(doc(db, `classroom/${classId}/checkin/${newCno}/scores/${student.id}`), {
          stdid: student.data().stdid,
          name: student.data().name,
          remark: "",
          score: 0,  // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          status: 0, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
          date: "",  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        });
      });

      alert(`‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${newCno} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      setLatestCheckinNo(newCno);
    } catch (error) {
      console.error("Error starting new check-in:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
  const handleCloseCheckIn = async () => {
    try {
      if (!latestCheckinNo) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà!");
        return;
      }

      await updateDoc(
        doc(db, `classroom/${classId}/checkin/${latestCheckinNo}`),
        { status: 2 }
      );

      alert("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
    } catch (error) {
      console.error("Error closing check-in:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  return (
    <div className="container mt-5">
      <h1 className="mb-4 text-center">üìã ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h1>

      <div className="d-flex justify-content-center gap-3 mb-4">
        <button className="btn btn-success" onClick={handleStartCheckIn}>
          ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
        </button>
        <button className="btn btn-danger" onClick={handleCloseCheckIn}>
          ‚ùå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        </button>
        <button className="btn btn-warning" onClick={fetchCheckinCode}>
          üîç ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        </button>
      </div>

       {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Check-in Code */}
       {checkinCode && (
        <div className="alert alert-info text-center">
          <h5>üìå ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠: <strong>{checkinCode}</strong></h5>
        </div>
      )}

      <div className="text-center mb-4">
        <h5>üîó QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h5>
        <QRCodeCanvas
          value={`${window.location.origin}/checkin/${classId}`}
          size={200}
        />
      </div>

      {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß */}
      <div className="card">
        <div className="card-body">
          <h5>üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</h5>
          {studentsCheckedIn.length > 0 ? (
            <table className="table">
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                  <th>‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤</th>
                  <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                </tr>
              </thead>
              <tbody>
                {studentsCheckedIn
                  .filter((student) => student.date !== "")
                  .map((student, index) => (
                    <tr key={student.id}>
                      <td>{index + 1}</td>
                      <td>{student.stdid}</td>
                      <td>{student.name}</td>
                      <td>{student.date}</td>
                      <td>{student.remark || "-"}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          ) : (
            <p className="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</p>
          )}
        </div>
      </div>

      {/* ‚úÖ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ */}
      <div className="card mt-4">
        <div className="card-body">
          <h5>üìÖ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h5>
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th>‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              </tr>
            </thead>
            <tbody>
              {checkins.map((checkin, index) => (
                <tr key={checkin.id}>
                  <td>{index + 1}</td>
                  <td>{checkin.date}</td>
                  <td>{checkin.studentCount}</td>
                  <td>{checkin.status === 1 ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" : "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

       {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
       <button
        className="btn btn-info mb-3"
        onClick={() => setShowScores(!showScores)}
      >
        {showScores ? "‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" : "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"}
      </button>

    {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
    {showScores && (
        <div className="card mt-3">
          <div className="card-body">
            <h5>üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h5>
            {studentsScores.length > 0 ? (
              <table className="table">
                <thead>
                  <tr>
                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th>‡∏£‡∏´‡∏±‡∏™</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                    <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                    <th>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</th>
                    <th>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  </tr>
                </thead>
                <tbody>
                  {studentsScores.map((student, index) => (
                    <tr key={student.id}>
                      <td>{index + 1}</td>
                      <td>{student.stdid}</td>
                      <td>{student.name}</td>
                      <td>
                        <input
                          type="text"
                          value={student.remark}
                          onChange={(e) =>
                            setStudentsScores((prev) =>
                              prev.map((s) =>
                                s.id === student.id
                                  ? { ...s, remark: e.target.value }
                                  : s
                              )
                            )
                          }
                        />
                      </td>
                      <td>{student.date || "-"}</td>
                      <td>
                        <input
                          type="number"
                          value={student.score}
                          onChange={(e) =>
                            setStudentsScores((prev) =>
                              prev.map((s) =>
                                s.id === student.id
                                  ? { ...s, score: Number(e.target.value) }
                                  : s
                              )
                            )
                          }
                        />
                      </td>
                      <td>{student.status === 1 ? "‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" : "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <p className="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
            )}

            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
            <button className="btn btn-success mt-3" onClick={handleSaveScores}>
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
          </div>
        </div>
      )}

      

      <div className="text-center mt-4">
        <button
          className="btn btn-secondary"
          onClick={() => navigate(`/manage-class/${classId}`)}
        >
          üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        </button>
        <button className="btn btn-warning mb-3 ms-2" onClick={handleGoToQuestionPage}>‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö</button>


      </div>
    </div>





  );
};

export default CheckinPage;
